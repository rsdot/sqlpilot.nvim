{
  "query": {
    "schemaobject": {
      "mssql": [
        "SET NOCOUNT ON",
        "SELECT",
        "  CASE",
        "  WHEN o.is_ms_shipped = 1 AND o.type IN ('TT') THEN tt_m.name+'.'+tt.name",
        "  ELSE m.name+'.'+o.name",
        "  END",
        "FROM sys.objects o",
        "INNER JOIN sys.schemas m",
        "ON o.schema_id = m.schema_id",
        "LEFT JOIN sys.table_types tt",
        "ON tt.type_table_object_id = o.object_id",
        "LEFT JOIN sys.schemas tt_m",
        "ON tt.schema_id = tt_m.schema_id",
        "WHERE (o.is_ms_shipped = 0 AND (o.type IN ('U','TR') OR (o.type = 'D' AND o.parent_object_id = 0)))",
        "OR (o.is_ms_shipped = 1 AND o.type IN ('TT'))",
        "ORDER BY CASE m.name WHEN 'dbo' THEN 0 ELSE 1 END, o.type, o.name"
      ],
      "oracle": [
        "set feedback off",
        "SELECT",
        "  obj.OWNER || '.' || obj.OBJECT_NAME AS objectname,",
        "  tab.NUM_ROWS,",
        "  --tab.last_analyzed,",
        "  --obj.created,",
        "  '[' || ds.BYTES/1024/1024 || ' MB - ' || tab.TABLESPACE_NAME || ']' as cntsizets",
        "FROM all_objects obj",
        "LEFT OUTER JOIN all_tables tab",
        "ON obj.owner = tab.owner AND obj.object_name = tab.table_name",
        "--LEFT OUTER JOIN all_tab_comments comm",
        "--ON obj.object_name = comm.table_name AND obj.owner = comm.owner",
        "LEFT OUTER JOIN dba_segments ds",
        "ON tab.OWNER = ds.OWNER AND tab.table_name = ds.segment_name AND tab.tablespace_name = ds.tablespace_name",
        "WHERE obj.owner = '{dbname}'",
        "  AND obj.OBJECT_TYPE IN ('TABLE','TRIGGER','VIEW','SEQUENCE'/*,'INDEX','SYNONYM'*/)",
        "ORDER BY obj.object_name;"
      ],
      "postgresql": [
        "SELECT",
        "  n.nspname AS schemaname,",
        "  c.relname AS objectname,",
        "  pg_size_pretty(pg_total_relation_size(c.oid)) || '(T:' || pg_size_pretty(pg_table_size(c.oid)) || '/I:' || pg_size_pretty(pg_indexes_size(c.oid)) || ')' AS size,",
        "  CAST(c.reltuples AS numeric(20,0)) AS rowcnt,",
        "--  CAST(c.relpages AS numeric(20,0)) AS pages,",
        "  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'i' THEN 'index' WHEN 'S' THEN 'sequence' WHEN 's' THEN 'special' WHEN 'f' THEN 'foreign table' END AS \"Type\",",
        "  u.usename as ownername",
        "FROM pg_class c",
        "INNER JOIN pg_namespace n",
        "ON n.oid = c.relnamespace",
        "INNER JOIN pg_catalog.pg_user u",
        "ON c.relowner = u.usesysid",
        "WHERE n.nspname NOT IN ('pg_catalog', 'information_schema') ",
        "  AND c.relname NOT LIKE 'pg_%'",
        "  AND (",
        "    c.relkind='r' --table",
        "    OR c.relkind='v' --view",
        "--    OR c.relkind='i' --index",
        "    OR c.relkind='S' --sequence",
        "    OR c.relkind='f' --foreign table",
        "    OR c.relkind='s' --special",
        "    )",
        "ORDER BY \"Type\" DESC,c.reltuples DESC;"
      ],
      "mysql": [
        "SELECT table_schema,table_name,table_rows FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '{dbname}';"
      ],
      "cassandra": [
        "SELECT table_name FROM system_schema.tables WHERE keyspace_name = '{dbname}';"
      ],
      "mongodb": [
        "show collections;"
      ]
    },
    "schemaobject_enhanced": {
      "mssql": [
        "SET NOCOUNT ON",
        "SELECT",
        "  CONVERT(nvarchar(19),o.modify_date,120),",
        "  CASE",
        "  WHEN o.is_ms_shipped = 1 AND o.type IN ('TT') THEN tt_m.name+'.'+tt.name",
        "  ELSE m.name+'.'+o.name",
        "  END",
        "FROM sys.objects o",
        "INNER JOIN sys.schemas m",
        "ON o.schema_id = m.schema_id",
        "LEFT JOIN sys.table_types tt",
        "ON tt.type_table_object_id = o.object_id",
        "LEFT JOIN sys.schemas tt_m",
        "ON tt.schema_id = tt_m.schema_id",
        "WHERE (o.is_ms_shipped = 0 AND (o.type IN ('U','TR') OR (o.type = 'D' AND o.parent_object_id = 0)))",
        "  OR (o.is_ms_shipped = 1 AND o.type IN ('TT'))",
        "ORDER BY o.modify_date DESC, CASE m.name WHEN 'dbo' THEN 0 ELSE 1 END, o.type, o.name"
      ],
      "oracle": [
        "set feedback off",
        "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';",
        "SELECT",
        "  obj.last_ddl_time,",
        "  obj.OWNER || '.' || obj.OBJECT_NAME AS objectname,",
        "  tab.NUM_ROWS,",
        "  'LastAnalyzed: ' || tab.last_analyzed AS last_analyzed,",
        "  'Created: ' || obj.created AS created,",
        "  'I: ' || m.INSERTS AS inserts,",
        "  'U: ' || m.UPDATES AS updates,",
        "  'D: ' || m.DELETES AS deletes",
        "  --comm.comments",
        "  --'[' || ds.BYTES/1024/1024 || ' MB - ' || tab.TABLESPACE_NAME || ']' as cntsizets",
        "FROM all_objects obj",
        "LEFT OUTER JOIN all_tables tab",
        "ON obj.owner = tab.owner AND obj.object_name = tab.table_name",
        "LEFT OUTER JOIN all_tab_modifications m",
        "ON m.table_owner = tab.owner AND m.table_name = tab.table_name",
        "--LEFT OUTER JOIN all_tab_comments comm",
        "--ON obj.object_name = comm.table_name AND obj.owner = comm.owner",
        "--LEFT OUTER JOIN dba_segments ds",
        "--ON tab.OWNER = ds.OWNER AND tab.table_name = ds.segment_name AND tab.tablespace_name = ds.tablespace_name",
        "WHERE obj.owner = '{dbname}'",
        "  AND obj.OBJECT_TYPE IN ('TABLE','TRIGGER','VIEW','SEQUENCE'/*,'INDEX','SYNONYM'*/)",
        "ORDER BY obj.last_ddl_time DESC, obj.object_name;"
      ],
      "postgresql": [
        "SELECT",
        "  su.schemaname,",
        "  su.relname,",
        "  pg_size_pretty(pg_total_relation_size(su.relid)) || '(T:' || pg_size_pretty(pg_table_size(su.relid)) || '/I:' || pg_size_pretty(pg_indexes_size(su.relid)) || ')',",
        "  n_live_tup AS rowcnt,",
        "  'I: ' || su.n_tup_ins,",
        "  'U: ' || su.n_tup_upd,",
        "  'D: ' || su.n_tup_del,",
        "  'HO: ' || su.n_tup_hot_upd,",
        "  'DD: ' || su.n_dead_tup,",
        "  'M-A: ' || su.n_mod_since_analyze,",
        "  'LastV: ' || su.last_vacuum,",
        "  'LastAutoV: ' || su.last_autovacuum,",
        "  'LastA: ' || su.last_analyze,",
        "  'LastAutoA: ' || su.last_autoanalyze",
        "FROM pg_stat_user_tables su",
        "ORDER BY 2"
      ],
      "mysql": [
        "SELECT",
        "  ROUND((t.DATA_LENGTH + t.INDEX_LENGTH) / 1024 / 1024) AS Size_MB,",
        "  t.table_rows,",
        "  s.table_schema,",
        "  s.table_name,",
        "  s.rows_inserted,",
        "  s.rows_updated,",
        "  s.rows_deleted",
        "FROM sys.x$schema_table_statistics s",
        "INNER JOIN INFORMATION_SCHEMA.TABLES t",
        "ON s.table_schema = t.table_schema AND s.table_name = t.table_name",
        "WHERE s.table_schema = '{dbname}'",
        "ORDER BY s.table_name;"
      ]
    },
    "programmableobject": {
      "mssql": [
        "SET NOCOUNT ON",
        "SELECT",
        "  concatname = m.name+'.'+o.name",
        "FROM sys.objects o",
        "INNER JOIN sys.schemas m ON o.schema_id = m.schema_id",
        "WHERE o.is_ms_shipped = 0",
        "  AND o.type IN ('P','PC','V','FN','TF','IF')",
        "ORDER BY",
        "  CASE m.name WHEN 'dbo' THEN 0 ELSE 1 END,",
        "  CASE WHEN o.type IN ('FN','TF','IF') THEN 'F' ELSE o.type END DESC,",
        "  o.name"
      ],
      "oracle": [
        "set feedback off",
        "SELECT",
        "  obj.OWNER || '.' || obj.OBJECT_NAME AS objectname,",
        "  tab.NUM_ROWS",
        "  --tab.last_analyzed,",
        "  --obj.created,",
        "  --'[' || ds.BYTES/1024/1024 || ' MB - ' || tab.TABLESPACE_NAME || ']' as cntsizets",
        "FROM all_objects obj",
        "LEFT OUTER JOIN all_tables tab",
        "ON obj.owner = tab.owner AND obj.object_name = tab.table_name",
        "--LEFT OUTER JOIN all_tab_comments comm",
        "--ON obj.object_name = comm.table_name AND obj.owner = comm.owner",
        "--LEFT OUTER JOIN dba_segments ds",
        "--ON tab.OWNER = ds.OWNER AND tab.table_name = ds.segment_name AND tab.tablespace_name = ds.tablespace_name",
        "WHERE obj.owner = '{dbname}'",
        "  AND obj.OBJECT_TYPE IN ('FUNCTION','PACKAGE'/*,'PACKAGE BODY'*/,'PROCEDURE')",
        "ORDER BY obj.object_name;"
      ],
      "postgresql": [
        "select",
        "  n.nspname as schema_name,",
        "  p.proname as specific_name,",
        "  case p.prokind ",
        "    when 'f' then 'FUNCTION'",
        "    when 'p' then 'PROCEDURE'",
        "    when 'a' then 'AGGREGATE'",
        "    when 'w' then 'WINDOW'",
        "    end as kind,",
        "  l.lanname as language,",
        "  t.typname as return_type,",
        "  pg_get_function_arguments(p.oid) as arguments",
        "  --case when l.lanname = 'internal' then p.prosrc else pg_get_functiondef(p.oid) end as definition",
        "from pg_proc p",
        "left join pg_namespace n on p.pronamespace = n.oid",
        "left join pg_language l on p.prolang = l.oid",
        "left join pg_type t on t.oid = p.prorettype ",
        "where n.nspname not in ('pg_catalog', 'information_schema')",
        "  and l.lanname NOT IN ('c')",
        "order by schema_name,",
        "  specific_name;"
      ]
    },
    "programmableobject_enhanced": {
      "mssql": [
        "SET NOCOUNT ON",
        "SELECT",
        "  CONVERT(nvarchar(19),o.modify_date,120),",
        "  concatname = m.name+'.'+o.name",
        "FROM sys.objects o",
        "INNER JOIN sys.schemas m ON o.schema_id = m.schema_id",
        "WHERE o.is_ms_shipped = 0",
        "  AND o.type IN ('P','PC','V','FN','TF','IF')",
        "ORDER BY",
        "  o.modify_date DESC,",
        "  CASE m.name WHEN 'dbo' THEN 0 ELSE 1 END,",
        "  CASE WHEN o.type IN ('FN','TF','IF') THEN 'F' ELSE o.type END DESC,",
        "  o.name"
      ],
      "oracle": [
        "set feedback off",
        "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';",
        "SELECT",
        "  obj.last_ddl_time,",
        "  obj.OWNER || '.' || obj.OBJECT_NAME AS objectname",
        "FROM all_objects obj",
        "WHERE obj.owner = '{dbname}'",
        "  AND obj.OBJECT_TYPE IN ('FUNCTION','PACKAGE'/*,'PACKAGE BODY'*/,'PROCEDURE')",
        "ORDER BY obj.last_ddl_time DESC, obj.object_name;"
      ]
    },
    "listcolumns": {
      "mssql": [
        "SET NOCOUNT ON",
        "",
        "DECLARE @id int",
        "DECLARE @HasColumnFlags bit",
        "SET @id = OBJECT_ID('{objectname}')",
        "SET @HasColumnFlags = 0",
        "",
        "DECLARE @CF TABLE(",
        "  ColumnName varchar(100) NOT NULL,",
        "  ColumnFlag varchar(5) NULL)",
        "DELETE FROM @CF",
        "",
        "IF @HasColumnFlags = 1",
        "BEGIN",
        "  --start of populating CF table",
        "  INSERT INTO @CF(",
        "    ColumnName,",
        "    ColumnFlag)",
        "  SELECT",
        "    c.name,",
        "    'X'",
        "  FROM sysindexes i",
        "  INNER JOIN sysindexkeys ik",
        "  ON i.id = ik.id AND i.indid = ik.indid",
        "  INNER JOIN syscolumns c",
        "  ON i.id = c.id AND ik.colid = c.colid",
        "  WHERE i.id = @id",
        "  ORDER BY object_name(i.id),i.name,ik.keyno",
        "",
        "  INSERT INTO @CF(",
        "    ColumnName,",
        "    ColumnFlag)",
        "  SELECT DISTINCT",
        "    c_r.name,",
        "    'R'",
        "  FROM sysforeignkeys f",
        "  INNER JOIN syscolumns c_f",
        "  ON f.fkeyid = c_f.id AND f.fkey = c_f.colid",
        "  INNER JOIN syscolumns c_r",
        "  ON f.rkeyid = c_r.id AND f.rkey = c_r.colid",
        "  WHERE f.rkeyid = @id",
        "",
        "  INSERT INTO @CF(",
        "    ColumnName,",
        "    ColumnFlag)",
        "  SELECT DISTINCT",
        "    c_f.name,",
        "    'F'",
        "  FROM sysforeignkeys f",
        "  INNER JOIN syscolumns c_f",
        "  ON f.fkeyid = c_f.id AND f.fkey = c_f.colid",
        "  INNER JOIN syscolumns c_r",
        "  ON f.rkeyid = c_r.id AND f.rkey = c_r.colid",
        "  WHERE f.fkeyid = @id",
        "  --end of populating CF table",
        "END",
        "",
        "SELECT",
        "  [{objectname}] = CASE @HasColumnFlags WHEN 0 THEN '@' ELSE ISNULL(Flags,'...')+' @' END+",
        "      ColumnName+' '+DataType+",
        "      CASE WHEN DefaultValue IS NOT NULL",
        "      THEN '='+CASE WHEN DataType NOT IN ('datetime') AND DataType NOT LIKE '%char' THEN REPLACE(REPLACE(DefaultValue,')',''),'(','') ELSE DefaultValue END",
        "      ELSE CASE WHEN Nullable IS NULL THEN '=null' ELSE '' END",
        "      END+','",
        "FROM",
        "  (SELECT",
        "    TableName = o.name,",
        "    ColumnSeq = sc.ORDINAL_POSITION,",
        "    ColumnName = sc.COLUMN_NAME,",
        "    DataType = sc.DATA_TYPE+",
        "      CASE",
        "      WHEN sc.DATA_TYPE LIKE '%char' THEN '('+CASE CONVERT(varchar(20),CHARACTER_MAXIMUM_LENGTH) WHEN '-1' THEN 'max' ELSE CONVERT(varchar(20),CHARACTER_MAXIMUM_LENGTH) END+')'",
        "      WHEN sc.DATA_TYPE IN ('numeric','decimal') THEN '('+CONVERT(varchar(20),NUMERIC_PRECISION)+','+CONVERT(varchar(20),NUMERIC_SCALE)+')'",
        "--      WHEN sc.DATA_TYPE IN ('money','text','ntext','bit','int','smallint','tinyint','bigint','datetime','smalldatetime','float','uniqueidentifier','hierachyid') THEN ''",
        "      ELSE ''",
        "      END,",
        "    Nullable = CASE sc.IS_NULLABLE WHEN 'YES' THEN NULL WHEN 'NO' THEN 'NOT NULL' END,",
        "    IsIdentity = CASE c.is_identity WHEN 0 THEN NULL WHEN 1 THEN 1 END,",
        "    DefaultValue = SUBSTRING(sc.COLUMN_DEFAULT,2,LEN(sc.COLUMN_DEFAULT)-2),",
        "    cf.Flags",
        "  FROM sys.objects o",
        "  INNER JOIN INFORMATION_SCHEMA.COLUMNS sc",
        "  ON o.name = sc.TABLE_NAME",
        "  INNER JOIN sys.columns c",
        "  ON c.object_id = o.object_id AND c.name = sc.COLUMN_NAME",
        "  LEFT JOIN",
        "    (SELECT",
        "      ColumnName,",
        "      Flags=ISNULL(X,'.')+ISNULL(F,'.')+ISNULL(R,'.')",
        "    FROM @CF",
        "    PIVOT (MIN(ColumnFlag) FOR ColumnFlag IN (X,F,R)) AS p) AS cf",
        "  ON sc.COLUMN_NAME = cf.ColumnName",
        "  WHERE o.type = 'U' AND o.object_id = @id) AS A",
        "ORDER BY TableName,ColumnSeq"
      ],
      "oracle": [
        "set feedback off",
        "declare",
        "  l_exists integer :=0;",
        "  plsql_block varchar2(1000);",
        "begin",
        "  begin",
        "  SELECT 1 into l_exists FROM all_tables WHERE owner = '{loginname}' AND table_name = 'tmp_columndef';",
        "  exception",
        "  when no_data_found then",
        "    l_exists:=0;",
        "  end;",
        "  if l_exists=1 then",
        "    plsql_block := 'TRUNCATE TABLE {loginname}.tmp_columndef';",
        "  else",
        "    plsql_block := 'CREATE TABLE {loginname}.tmp_columndef(",
        "    TABLE_NAME        VARCHAR2(30) NOT NULL,",
        "    COLUMN_ID         NUMBER NOT NULL,",
        "    COLUMN_NAME       VARCHAR2(30) NOT NULL,",
        "    DATA_TYPE         VARCHAR2(106) NOT NULL,",
        "    DATA_PRECISION    NUMBER NULL,",
        "    DATA_SCALE        NUMBER NULL,",
        "    CHAR_LENGTH       NUMBER NULL,",
        "    NULLABLE          VARCHAR2(1) NULL,",
        "    DATA_DEFAULT      CLOB NULL",
        "    )';",
        "  end if;",
        "",
        "  --DBMS_OUTPUT.PUT_LINE(plsql_block);",
        "  EXECUTE IMMEDIATE plsql_block;",
        "end;",
        "/",
        "",
        "INSERT INTO {loginname}.tmp_columndef",
        "SELECT",
        "  col.table_name,",
        "  col.column_id,",
        "  col.column_name,",
        "  col.data_type,",
        "  col.data_precision,",
        "  col.data_scale,",
        "  col.char_length,",
        "  col.nullable,",
        "  to_lob(col.data_default) as data_default",
        "FROM all_tables tab",
        "INNER JOIN all_tab_columns col",
        "ON col.owner = tab.owner AND col.table_name = tab.table_name",
        "WHERE tab.owner = '{dbname}'",
        "  AND tab.table_name = '{objectname}';",
        "",
        "SELECT",
        "  '@' || col.column_name || ' ' ||",
        "    CASE",
        "    WHEN col.data_type IN ('NUMBER','FLOAT') AND col.data_precision IS NULL AND col.data_scale IS NULL THEN col.data_type",
        "    WHEN col.data_type = 'NUMBER' AND col.data_precision IS NULL AND col.data_scale = 0 THEN col.data_type || '(38)'",
        "    WHEN col.data_type = 'FLOAT' AND col.data_precision IS NULL AND col.data_scale = 0 THEN col.data_type || '(126)'",
        "    WHEN col.data_type IN ('NUMBER','FLOAT') AND col.data_precision IS NOT NULL THEN col.data_type || '(' || col.data_precision || ')'",
        "    WHEN col.data_type LIKE '%VARCHAR2' OR col.data_type = 'CHAR' THEN col.data_type || '(' || col.char_length || ')'",
        "    ELSE col.data_type",
        "    END ||",
        "    CASE",
        "    WHEN col.data_default IS NULL THEN DECODE(col.nullable,'N', ',', '=null,')",
        "    ELSE '=' || TRIM(CAST(col.data_default AS VARCHAR2(100))) || ','",
        "    END AS \"{objectname}\"",
        "FROM {loginname}.tmp_columndef col",
        "ORDER BY",
        "  col.table_name,",
        "  col.column_id;"
      ],
      "postgresql": [
        "SELECT",
        "  --n.nspname AS owner,",
        "  --a.attnum AS column_seq,",
        "  a.attname AS column_name,",
        "  replace(pg_catalog.format_type(a.atttypid, a.atttypmod),'character varying','varchar') AS data_type,",
        "  CASE WHEN a.attnotnull THEN 'NOT NULL' ELSE 'NULL' END AS Nullable,",
        "  col.column_default",
        "FROM pg_catalog.pg_attribute a",
        "INNER JOIN pg_catalog.pg_class c",
        "ON c.oid = a.attrelid",
        "INNER JOIN pg_catalog.pg_namespace n",
        "ON n.oid = c.relnamespace",
        "LEFT JOIN information_schema.columns col",
        "ON n.nspname = col.table_schema AND c.relname = col.table_name AND a.attname = col.column_name",
        "WHERE a.attnum > 0",
        "  AND c.relkind='r' --table",
        "  AND NOT a.attisdropped",
        "  AND n.nspname = 'public'",
        "  AND UPPER(c.relname) = UPPER('{objectname}')",
        "ORDER BY a.attnum"
      ],
      "mysql": [
        "SELECT COLUMN_NAME,COLUMN_TYPE,IS_NULLABLE,COLLATION_NAME,COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '{dbname}' AND TABLE_NAME = '{objectname}' ORDER BY ORDINAL_POSITION;"
      ]
    },
    "listjobs": {
      "mssql": [
        "SELECT",
        "  j.name,",
        "  run_status = CASE jh.run_status WHEN 0 THEN 'Failed'",
        "    WHEN 1 THEN 'Success'",
        "    WHEN 2 THEN 'Retry'",
        "    WHEN 3 THEN 'Canceled'",
        "    WHEN 4 THEN 'In progress'",
        "    END,",
        "  jh.lastruntime,",
        "  jh.step_id,",
        "  jh.step_name,",
        "  jh.run_duration,",
        "  message = REPLACE(jh.message,CHAR(13)+CHAR(10),' ')",
        "FROM msdb..sysjobs j WITH (NOLOCK)",
        "CROSS APPLY (",
        "  SELECT r.*",
        "  FROM",
        "    (SELECT",
        "      runid = ROW_NUMBER() OVER (",
        "        PARTITION BY jh.job_id, jh.step_id",
        "        ORDER BY CAST(",
        "            STUFF(STUFF(CAST(jh.run_date as varchar),7,0,'-'),5,0,'-') + ' ' +",
        "            STUFF(STUFF(REPLACE(STR(jh.run_time,6,0),' ','0'),5,0,':'),3,0,':') as datetime) DESC),",
        "      lastruntime = CAST(",
        "        STUFF(STUFF(CAST(jh.run_date as varchar),7,0,'-'),5,0,'-') + ' ' +",
        "        STUFF(STUFF(REPLACE(STR(jh.run_time,6,0),' ','0'),5,0,':'),3,0,':') as datetime),",
        "      *",
        "    FROM msdb..sysjobhistory jh WITH (NOLOCK)",
        "    WHERE j.job_id = jh.job_id",
        "    ) AS r",
        "  WHERE r.runid = 1",
        "  ) AS jh",
        "ORDER BY jh.run_status,j.name,jh.step_id"
      ]
    },
    "desc": {
      "mssql": [
        "sp_help {objectname}"
      ],
      "oracle": [
        "set wrap on",
        "set heading off",
        "set feedback off",
        "SELECT DBMS_METADATA.GET_DDL(obj.OBJECT_TYPE, obj.OBJECT_NAME, obj.OWNER)",
        "FROM all_objects obj",
        "WHERE obj.owner = '{dbname}'",
        "  AND obj.OBJECT_NAME = '{objectname}'",
        "  AND obj.OBJECT_TYPE NOT IN ('PACKAGE BODY');",
        "",
        "SELECT DBMS_METADATA.GET_DDL('INDEX', ind.index_name, ind.owner)",
        "FROM all_indexes ind",
        "INNER JOIN all_tables tab",
        "ON ind.owner = tab.owner AND ind.table_name = tab.table_name",
        "WHERE ind.owner = '{dbname}'",
        "  AND ind.table_owner = '{dbname}' ",
        "  AND ind.table_name = '{objectname}'",
        "ORDER BY ind.index_name;",
        "",
        "SELECT DBMS_METADATA.GET_DDL('TRIGGER', tri.trigger_name, tri.owner)",
        "FROM all_triggers tri",
        "INNER JOIN all_tables tab",
        "ON tri.owner = tab.owner AND tri.table_name = tab.table_name",
        "WHERE tri.owner = '{dbname}'",
        "  AND tri.table_owner = '{dbname}' ",
        "  AND tri.table_name = '{objectname}'",
        "ORDER BY tri.trigger_name;"
      ],
      "mysql": [
        "desc {objectname}"
      ]
    },
    "descindex": {
      "mssql": [
        "SET NOCOUNT ON",
        ";WITH CTE AS (",
        "SELECT",
        "  TableName = object_name(i.object_id),",
        "  IndexName = i.name  COLLATE Latin1_General_CI_AS,",
        "  IndexType = i.type_desc,",
        "  ColumnName = c.name,",
        "  ColumnSeq = ic.index_column_id,",
        "  IsPK = i.is_primary_key,",
        "  IsUniqueIX = i.is_unique,",
        "  IsUniqueUQ = i.is_unique_constraint,",
        "  IsIncluded = ic.is_included_column",
        "FROM sys.index_columns ic",
        "INNER JOIN sys.indexes i",
        "ON i.object_id = ic.object_id AND i.index_id = ic.index_id",
        "INNER JOIN sys.columns c",
        "ON i.object_id = c.object_id AND ic.column_id = c.column_id",
        "WHERE i.object_id = object_id('{objectname}')",
        ")",
        ",N AS (SELECT DISTINCT TableName,IndexName,IndexType,IsPK,IsUniqueIX,IsUniqueUQ FROM CTE)",
        "SELECT",
        "  R.num_rows,",
        "  TableName,",
        "  IndexName,",
        "  IndexType = LEFT(IndexType,3)+'.'+CASE IsPK WHEN 1 THEN 'PK' ELSE '..' END+'.'+CASE WHEN IsUniqueIX = 1 OR IsUniqueUQ = 1 THEN 'UNI' ELSE '...' END,",
        "  IndexField = LEFT(regularix.list,LEN(regularix.list)-1)+'..'+ISNULL('INCLUDE('+LEFT(includeix.list,LEN(includeix.list)-1)+')','')",
        "FROM N",
        "CROSS APPLY",
        "  (SELECT num_rows=sum(b.rows)",
        "    FROM sys.tables a",
        "    JOIN sys.partitions b",
        "    ON a.object_id = b.object_id",
        "    WHERE index_id in (1,0)",
        "      AND a.name = N.TableName) AS R",
        "CROSS APPLY",
        "  (SELECT ",
        "    CONVERT(varchar(50),ColumnName) + ',' AS [text()] ",
        "  FROM CTE ",
        "  WHERE IndexName = N.IndexName",
        "    AND IsIncluded = 0 ",
        "  ORDER BY ColumnSeq ",
        "  FOR XML PATH ('')) regularix (list)",
        "OUTER APPLY",
        "  (SELECT ",
        "    CONVERT(varchar(50),ColumnName) + ',' AS [text()] ",
        "  FROM CTE ",
        "  WHERE IndexName = N.IndexName",
        "    AND IsIncluded = 1",
        "  ORDER BY ColumnSeq ",
        "  FOR XML PATH ('')) includeix (list)",
        "ORDER BY IndexType,IndexName"
      ],
      "oracle": [
        "set feedback off",
        "declare",
        "  l_exists integer :=0;",
        "  plsql_block varchar2(1000);",
        "begin",
        "  begin",
        "  SELECT 1 into l_exists FROM all_tables WHERE owner = '{loginname}' AND table_name = 'tmp_indexdef';",
        "  exception",
        "  when no_data_found then",
        "    l_exists:=0;",
        "  end;",
        "  if l_exists=1 then",
        "    plsql_block := 'TRUNCATE TABLE {loginname}.tmp_indexdef';",
        "  else",
        "    plsql_block := 'CREATE TABLE {loginname}.tmp_indexdef(",
        "    TABLE_NAME        VARCHAR2(30) NOT NULL,",
        "    INDEX_NAME        VARCHAR2(30) NOT NULL,",
        "    UNIQUENESS        VARCHAR2(9) NOT NULL,",
        "    COLUMN_POSITION   NUMBER NOT NULL,",
        "    COLUMN_NAME       VARCHAR2(100) NOT NULL,",
        "    COLUMN_EXPRESSION CLOB NULL,",
        "    INDEX_TYPE        VARCHAR2(27) NOT NULL",
        "    )';",
        "  end if;",
        "",
        "  --DBMS_OUTPUT.PUT_LINE(plsql_block);",
        "  EXECUTE IMMEDIATE plsql_block;",
        "end;",
        "/",
        "",
        "INSERT INTO {loginname}.tmp_indexdef",
        "SELECT",
        "  ind.table_name,",
        "  ind.index_name,",
        "  ind.uniqueness,",
        "  ind_col.column_position,",
        "  ind_col.column_name,",
        "  to_lob(ie.column_expression) AS column_expression,",
        "  ind.index_type",
        "FROM all_indexes ind",
        "INNER JOIN all_ind_columns ind_col",
        "ON ind.owner = ind_col.index_owner",
        "  AND ind.table_owner = ind_col.table_owner",
        "  AND ind.table_name = ind_col.table_name",
        "  AND ind.index_name = ind_col.index_name",
        "LEFT JOIN all_ind_expressions ie",
        "ON ie.table_owner = ind_col.table_owner",
        "  AND ie.table_name = ind_col.table_name",
        "  AND ie.index_owner = ind_col.index_owner",
        "  AND ie.index_name = ind_col.index_name",
        "  AND ie.column_position = ind_col.column_position",
        "WHERE ind.owner = '{dbname}'",
        "  AND ind.table_owner = '{dbname}'",
        "  AND ind.table_name = '{objectname}';",
        "",
        "SELECT",
        "  tab.num_rows,",
        "  c.table_name AS TableName,",
        "  c.index_name AS IndexName,",
        "  c.uniqueness,",
        "  LISTAGG(NVL(c.column_expression,c.column_name), ',') WITHIN GROUP (ORDER BY c.column_position) AS IndexField,",
        "  c.index_type AS IndexType",
        "FROM {loginname}.tmp_indexdef c",
        "INNER JOIN all_tables tab",
        "ON tab.owner = '{dbname}' AND tab.table_name = c.table_name",
        "GROUP BY",
        "  tab.num_rows,",
        "  c.table_name,",
        "  c.index_name,",
        "  c.uniqueness,",
        "  c.index_type",
        "ORDER BY",
        "  c.table_name,",
        "  c.uniqueness DESC,",
        "  c.index_name;"
      ],
      "postgresql": [
        "SELECT",
        "  --U.usename AS user_name,",
        "  --ns.nspname AS schema_name,",
        "  (SELECT reltuples::numeric(20,0) FROM pg_class WHERE oid = idx.indrelid) AS rowcnt,",
        "  i.reltuples::numeric(20,0) AS idxrowcnt,",
        "  pg_size_pretty(pg_relation_size(sui.indexrelname::text)) AS size,",
        "  idx.indrelid::REGCLASS AS tablename,",
        "  i.relname AS indexname,",
        "  idx.indisunique AS isunique,",
        "  ARRAY_TO_STRING(ARRAY(",
        "    SELECT pg_get_indexdef(idx.indexrelid, k + 1, TRUE)",
        "    FROM generate_subscripts(idx.indkey, 1) AS k",
        "    ORDER BY k",
        "    ),', ') AS indexfield,",
        "  am.amname AS indextype,",
        "  idx.indisprimary AS isprimary,",
        "  (idx.indexprs IS NOT NULL) OR (idx.indkey::int[] @> array[0]) AS isfunctional,",
        "  idx.indpred IS NOT NULL AS ispartial,",
        "  replace(pg_get_indexdef(idx.indexrelid),'::character varying','::varchar') AS indexdef",
        "FROM pg_index AS idx",
        "JOIN pg_class AS i",
        "ON i.oid = idx.indexrelid",
        "JOIN pg_am AS am",
        "ON i.relam = am.oid",
        "JOIN pg_namespace AS NS",
        "ON i.relnamespace = NS.OID",
        "INNER JOIN pg_stat_user_indexes sui",
        "ON ns.nspname = sui.schemaname AND idx.indrelid::REGCLASS::text = sui.relname AND i.relname = sui.indexrelname",
        "--JOIN pg_user AS U",
        "--ON i.relowner = U.usesysid",
        "WHERE 1=1",
        "  AND ns.nspname NOT IN ('pg_catalog', 'pg_toast')",
        "  AND ns.nspname = 'public'",
        "  AND idx.indrelid::REGCLASS = '{objectname}'::REGCLASS",
        "ORDER BY tablename,isprimary DESC,isunique DESC,indexname"
      ],
      "mysql": [
        "SELECT",
        "  idx.table_rows,",
        "  CONCAT(ROUND(SUM(idxs.stat_value) * @@innodb_page_size /1024/1024,2), ' mB') as size_mB,",
        "  idxs.table_name,",
        "  idxs.index_name,",
        "  idx.is_unique,",
        "  idx.index_field",
        "FROM mysql.innodb_index_stats idxs",
        "INNER JOIN",
        "  (SELECT",
        "    t.table_rows,",
        "    s.table_name,",
        "    s.index_name,",
        "    case s.non_unique when 1 then 'Not Unique' else 'Unique' end as is_unique,",
        "    group_concat(s.column_name order by s.seq_in_index) as index_field",
        "  FROM information_schema.statistics s",
        "  INNER JOIN information_schema.tables t USING(table_schema,table_name)",
        "  WHERE s.table_schema = '{dbname}'",
        "    AND s.index_schema = '{dbname}'",
        "    AND s.table_name = '{objectname}'",
        "  GROUP BY",
        "    table_rows,",
        "    table_name,",
        "    index_name,",
        "    is_unique",
        "  ) AS idx USING(table_name, index_name)",
        "WHERE idxs.database_name = '{dbname}'",
        "  AND idxs.stat_description LIKE 'Number of pages in the index'",
        "GROUP BY",
        "  idx.table_rows,",
        "  idxs.table_name,",
        "  idxs.index_name,",
        "  idx.is_unique,",
        "  idx.index_field",
        "ORDER BY ",
        "  idxs.table_name,",
        "  idx.is_unique DESC,",
        "  idxs.index_name"
      ],
      "mongodb": [
        "db.getCollection('{objectname}').getIndexes()"
      ]
    },
    "contextinfo": {
      "mssql": [
        "EXEC('print @@SERVERNAME print DB_NAME() print USER_NAME() print SUSER_SNAME() print SUSER_SID()')"
      ],
      "oracle": [
        "set feedback off",
        "BEGIN",
        "  DBMS_OUTPUT.PUT_LINE('');",
        "  DBMS_OUTPUT.PUT_LINE('SERVER_HOST     : ' || sys_context('USERENV','SERVER_HOST'));",
        "  DBMS_OUTPUT.PUT_LINE('INSTANCE_NAME   : ' || sys_context('USERENV','INSTANCE_NAME'));",
        "  DBMS_OUTPUT.PUT_LINE('CURRENT_SCHEMA  : ' || sys_context('USERENV','CURRENT_SCHEMA'));",
        "  DBMS_OUTPUT.PUT_LINE('CURRENT_USER    : ' || sys_context('USERENV','CURRENT_USER'));",
        "  DBMS_OUTPUT.PUT_LINE('SESSION_USER    : ' || sys_context('USERENV','SESSION_USER'));",
        "  DBMS_OUTPUT.PUT_LINE('SESSIONID       : ' || sys_context('USERENV','SESSIONID'));",
        "  DBMS_OUTPUT.PUT_LINE('SID             : ' || sys_context('USERENV','SID'));",
        "  DBMS_OUTPUT.PUT_LINE('NLS_SORT        : ' || sys_context('USERENV','NLS_SORT'));",
        "  DBMS_OUTPUT.PUT_LINE('HOST            : ' || sys_context('USERENV','HOST'));",
        "END;",
        "/",
        "SELECT * FROM ALL_USERS WHERE USERNAME = '{loginname}';",
        "SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = '{loginname}';",
        "SELECT * FROM DBA_SYS_PRIVS  WHERE GRANTEE = '{loginname}';",
        "SELECT * FROM DBA_TAB_PRIVS  WHERE GRANTEE = '{loginname}';",
        "col PARAMETER format a30",
        "col VALUE format a30",
        "SELECT * FROM NLS_SESSION_PARAMETERS;"
      ],
      "postgresql": [
        "--SELECT",
        "--  server_id,",
        "--  session_id,",
        "--  highest_lsn_rcvd,",
        "--  cur_replay_latency_in_usec,",
        "--  now(),",
        "--  last_update_timestamp",
        "--from aurora_replica_status();",
        "",
        "SELECT r.rolname, d.datname, unnest(rs.setconfig) as config",
        "FROM pg_db_role_setting rs",
        "LEFT JOIN pg_roles r ON r.oid = rs.setrole",
        "LEFT JOIN pg_database d ON d.oid = rs.setdatabase",
        "WHERE r.rolname = CURRENT_USER OR d.datname = '{dbname}';",
        "",
        "WITH RECURSIVE cte AS (",
        "  SELECT",
        "    pg_roles.oid,",
        "    pg_roles.rolname",
        "  FROM pg_roles",
        "  WHERE pg_roles.rolname = CURRENT_USER",
        "  UNION ALL",
        "  SELECT",
        "    m.roleid,",
        "    pgr.rolname",
        "  FROM cte cte_1",
        "  JOIN pg_auth_members m ON m.member = cte_1.oid",
        "  JOIN pg_roles pgr ON pgr.oid = m.roleid",
        ")",
        "SELECT array_agg(cte.rolname) AS my_roles FROM cte;",
        "",
        "SELECT",
        "  grantee",
        "  ,table_catalog",
        "  ,table_schema",
        "  ,table_name",
        "  ,string_agg(privilege_type, ', ' ORDER BY privilege_type) AS privileges",
        "FROM information_schema.role_table_grants",
        "WHERE grantee != 'postgres'",
        "GROUP BY grantee, table_catalog, table_schema, table_name;",
        "",
        "SELECT ",
        "  pgd.datname as database_name,",
        "  (select string_agg(pgu.usename, ',' order by pgu.usename) ",
        "  from pg_user pgu ",
        "  where has_database_privilege(pgu.usename, pgd.datname, 'CONNECT')) as user_name",
        "FROM pg_database pgd",
        "ORDER BY pgd.datname;",
        "",
        "SELECT",
        "  pgu.usename as user_name,",
        "  (select string_agg(pgd.datname, ',' order by pgd.datname) ",
        "   from pg_database pgd ",
        "   where has_database_privilege(pgu.usename, pgd.datname, 'CONNECT')) as database_name",
        "FROM pg_user pgu",
        "ORDER BY pgu.usename;",
        "",
        "SELECT",
        "  r.rolname, r.rolsuper, r.rolinherit, r.rolcreaterole, r.rolcreatedb, r.rolcanlogin, r.rolconnlimit, r.rolvaliduntil, r.rolreplication , r.rolbypassrls,",
        "  ARRAY(SELECT b.rolname",
        "        FROM pg_catalog.pg_auth_members m",
        "        JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)",
        "        WHERE m.member = r.oid) as memberof",
        "FROM pg_catalog.pg_roles r",
        "WHERE r.rolname NOT IN ('pg_signal_backend','rds_iam', 'rds_replication','rds_superuser', 'rdsadmin','rdsrepladmin')",
        "ORDER BY 1;"
      ],
      "mysql": [
        "show grants;",
        "SELECT Db,group_concat(User,',') as Users FROM mysql.db GROUP BY Db ORDER BY Db;",
        "SELECT GRANTEE, PRIVILEGE_TYPE, IS_GRANTABLE FROM INFORMATION_SCHEMA.USER_PRIVILEGES ORDER BY GRANTEE;",
        "SELECT GRANTEE, TABLE_SCHEMA, PRIVILEGE_TYPE, IS_GRANTABLE FROM INFORMATION_SCHEMA.SCHEMA_PRIVILEGES ORDER BY TABLE_SCHEMA, GRANTEE;"
      ]
    },
    "listfktables": {
      "mssql": [
        "SELECT",
        "  FKeyTable = object_name(f.fkeyid),",
        "  FKeyColumn = c_f.name,",
        "  PrimaryTable = object_name(f.rkeyid),",
        "  PrimaryTableColumn = c_r.name,",
        "  FKeyConstraint = object_name(f.constid)",
        "FROM sysforeignkeys f",
        "INNER JOIN syscolumns c_f",
        "ON f.fkeyid = c_f.id AND f.fkey = c_f.colid",
        "INNER JOIN syscolumns c_r",
        "ON f.rkeyid = c_r.id AND f.rkey = c_r.colid",
        "WHERE f.rkeyid = object_id('{objectname}')",
        "ORDER BY 1,2",
        "",
        "SELECT",
        "  FKeyTable = object_name(f.fkeyid),",
        "  FKeyColumn = c_f.name,",
        "  PrimaryTable = object_name(f.rkeyid),",
        "  PrimaryTableColumn = c_r.name,",
        "  FKeyConstraint = object_name(f.constid)",
        "FROM sysforeignkeys f",
        "INNER JOIN syscolumns c_f",
        "ON f.fkeyid = c_f.id AND f.fkey = c_f.colid",
        "INNER JOIN syscolumns c_r",
        "ON f.rkeyid = c_r.id AND f.rkey = c_r.colid",
        "WHERE f.fkeyid = object_id('{objectname}')",
        "ORDER BY 1,2"
      ],
      "oracle": [
        "set feedback off",
        "SELECT",
        "  f.table_name AS FKeyTable,",
        "  LISTAGG(f.column_name, ',') WITHIN GROUP (ORDER BY f.POSITION) AS FKeyColumn,",
        "  p.table_name AS PrimaryTable,",
        "  LISTAGG(p.column_name, ',') WITHIN GROUP (ORDER BY p.POSITION) AS PrimaryTableColumn,",
        "  f.constraint_name AS FKeyConstraint",
        "FROM all_cons_columns f",
        "INNER JOIN all_constraints c",
        "ON f.owner = c.owner AND f.constraint_name = c.constraint_name",
        "INNER JOIN all_cons_columns p",
        "ON p.owner = c.r_owner AND p.constraint_name = c.r_constraint_name",
        "WHERE c.constraint_type = 'R'",
        "  AND p.owner = '{dbname}'",
        "  AND p.table_name = '{objectname}'",
        "  AND f.POSITION = p.POSITION",
        "GROUP BY f.table_name, p.table_name, f.constraint_name",
        "ORDER BY f.table_name, f.constraint_name;",
        "",
        "SELECT",
        "  f.table_name AS FKeyTable,",
        "  LISTAGG(f.column_name, ',') WITHIN GROUP (ORDER BY f.POSITION) AS FKeyColumn,",
        "  p.table_name AS PrimaryTable,",
        "  LISTAGG(p.column_name, ',') WITHIN GROUP (ORDER BY p.POSITION) AS PrimaryTableColumn,",
        "  f.constraint_name AS FKeyConstraint",
        "FROM all_cons_columns f",
        "INNER JOIN all_constraints c",
        "ON f.owner = c.owner AND f.constraint_name = c.constraint_name",
        "INNER JOIN all_cons_columns p",
        "ON p.owner = c.r_owner AND p.constraint_name = c.r_constraint_name",
        "WHERE c.constraint_type = 'R'",
        "  AND f.owner = '{dbname}'",
        "  AND f.table_name = '{objectname}'",
        "  AND f.POSITION = p.POSITION",
        "GROUP BY f.table_name, p.table_name, f.constraint_name",
        "ORDER BY f.table_name, f.constraint_name;"
      ],
      "postgresql": [
        "WITH cte AS(",
        "SELECT",
        "  fc.table_name AS FKeyTable,",
        "  STRING_AGG(fc.column_name, ',' ORDER BY fc.position_in_unique_constraint) AS FKeyColumn,",
        "  pc.table_name AS PrimaryTable,",
        "  STRING_AGG(pc.column_name, ',' ORDER BY pc.ordinal_position) AS PrimaryTableColumn,",
        "  fc.constraint_name AS FKeyConstraint,",
        "  pc.constraint_name AS PrimaryTableConstraint,",
        "  ref.update_rule,",
        "  ref.delete_rule",
        "FROM information_schema.table_constraints ft",
        "INNER JOIN information_schema.key_column_usage fc",
        "ON fc.table_catalog = ft.table_catalog",
        "  AND fc.table_schema = ft.table_schema",
        "  AND fc.table_name = ft.table_name",
        "  AND fc.constraint_catalog = ft.constraint_catalog",
        "  AND fc.constraint_schema = ft.constraint_schema",
        "  AND fc.constraint_name = ft.constraint_name",
        "INNER JOIN information_schema.referential_constraints ref",
        "ON fc.constraint_catalog = ref.constraint_catalog",
        "  AND fc.constraint_schema = ref.constraint_schema",
        "  AND fc.constraint_name = ref.constraint_name",
        "INNER JOIN information_schema.key_column_usage pc",
        "ON pc.constraint_catalog = ref.unique_constraint_catalog",
        "  AND pc.constraint_schema = ref.unique_constraint_schema",
        "  AND pc.constraint_name = ref.unique_constraint_name",
        "INNER JOIN information_schema.table_constraints pt",
        "ON pc.table_catalog = pt.table_catalog",
        "  AND pc.table_schema = pt.table_schema",
        "  AND pc.table_name = pt.table_name",
        "  AND pc.constraint_catalog = pt.constraint_catalog",
        "  AND pc.constraint_schema = pt.constraint_schema",
        "  AND pc.constraint_name = pt.constraint_name",
        "WHERE pc.ordinal_position = fc.position_in_unique_constraint",
        "  AND ft.table_catalog = '{dbname}'",
        "  AND ft.table_schema = 'public'",
        "  AND ft.constraint_type = 'FOREIGN KEY'",
        "  AND UPPER(pt.table_name) = UPPER('{objectname}')",
        "GROUP BY",
        "  fc.table_name,",
        "  pc.table_name,",
        "  fc.constraint_name,",
        "  pc.constraint_name,",
        "  ref.update_rule,",
        "  ref.delete_rule",
        ")",
        "SELECT",
        "  *,",
        "  (SELECT pgc.convalidated FROM pg_constraint pgc WHERE cte.FKeyTable = pgc.conrelid::regclass::text AND cte.FKeyConstraint = pgc.conname) AS convalidated,",
        "  (SELECT format('ALTER TABLE %s ADD CONSTRAINT %s %s;', conrelid::regclass::text, conname, pg_get_constraintdef(oid))",
        "   FROM pg_constraint pgc WHERE cte.FKeyTable = pgc.conrelid::regclass::text AND cte.FKeyConstraint = pgc.conname) AS fkdef",
        "FROM cte",
        "ORDER BY FKeyTable, FKeyConstraint",
        ";",
        "",
        "WITH cte AS(",
        "SELECT",
        "  fc.table_name AS FKeyTable,",
        "  STRING_AGG(fc.column_name, ',' ORDER BY fc.position_in_unique_constraint) AS FKeyColumn,",
        "  pc.table_name AS PrimaryTable,",
        "  STRING_AGG(pc.column_name, ',' ORDER BY pc.ordinal_position) AS PrimaryTableColumn,",
        "  fc.constraint_name AS FKeyConstraint,",
        "  pc.constraint_name AS PrimaryTableConstraint,",
        "  ref.update_rule,",
        "  ref.delete_rule",
        "FROM information_schema.table_constraints ft",
        "INNER JOIN information_schema.key_column_usage fc",
        "ON fc.table_catalog = ft.table_catalog",
        "  AND fc.table_schema = ft.table_schema",
        "  AND fc.table_name = ft.table_name",
        "  AND fc.constraint_catalog = ft.constraint_catalog",
        "  AND fc.constraint_schema = ft.constraint_schema",
        "  AND fc.constraint_name = ft.constraint_name",
        "INNER JOIN information_schema.referential_constraints ref",
        "ON fc.constraint_catalog = ref.constraint_catalog",
        "  AND fc.constraint_schema = ref.constraint_schema",
        "  AND fc.constraint_name = ref.constraint_name",
        "INNER JOIN information_schema.key_column_usage pc",
        "ON pc.constraint_catalog = ref.unique_constraint_catalog",
        "  AND pc.constraint_schema = ref.unique_constraint_schema",
        "  AND pc.constraint_name = ref.unique_constraint_name",
        "INNER JOIN information_schema.table_constraints pt",
        "ON pc.table_catalog = pt.table_catalog",
        "  AND pc.table_schema = pt.table_schema",
        "  AND pc.table_name = pt.table_name",
        "  AND pc.constraint_catalog = pt.constraint_catalog",
        "  AND pc.constraint_schema = pt.constraint_schema",
        "  AND pc.constraint_name = pt.constraint_name",
        "WHERE pc.ordinal_position = fc.position_in_unique_constraint",
        "  AND ft.table_catalog = '{dbname}'",
        "  AND ft.table_schema = 'public'",
        "  AND ft.constraint_type = 'FOREIGN KEY'",
        "  AND UPPER(ft.table_name) = UPPER('{objectname}')",
        "GROUP BY",
        "  fc.table_name,",
        "  pc.table_name,",
        "  fc.constraint_name,",
        "  pc.constraint_name,",
        "  ref.update_rule,",
        "  ref.delete_rule",
        ")",
        "SELECT",
        "  *,",
        "  (SELECT pgc.convalidated FROM pg_constraint pgc WHERE cte.FKeyTable = pgc.conrelid::regclass::text AND cte.FKeyConstraint = pgc.conname) AS convalidated,",
        "  (SELECT format('ALTER TABLE %s ADD CONSTRAINT %s %s;', conrelid::regclass::text, conname, pg_get_constraintdef(oid))",
        "   FROM pg_constraint pgc WHERE cte.FKeyTable = pgc.conrelid::regclass::text AND cte.FKeyConstraint = pgc.conname) AS fkdef",
        "FROM cte",
        "ORDER BY FKeyTable, FKeyConstraint"
      ],
      "mysql": [
        "SELECT",
        "  fks.table_name AS FKeyTable,",
        "  group_concat(kcu_f.column_name order by kcu_f.position_in_unique_constraint separator ',') AS FKeyColumn,",
        "  fks.referenced_table_name AS PrimaryTable,",
        "  group_concat(kcu_p.column_name order by kcu_p.position_in_unique_constraint separator ',') AS PrimaryTableColumn,",
        "  fks.constraint_name AS FKeyConstraint",
        "FROM information_schema.referential_constraints fks",
        "JOIN information_schema.key_column_usage kcu_f",
        "ON fks.constraint_schema = kcu_f.table_schema",
        "  AND fks.table_name = kcu_f.table_name",
        "  AND fks.constraint_name = kcu_f.constraint_name",
        "JOIN information_schema.key_column_usage kcu_p",
        "ON fks.constraint_schema = kcu_p.table_schema",
        "  AND fks.referenced_table_name = kcu_p.table_name",
        "  AND fks.UNIQUE_CONSTRAINT_NAME = kcu_p.constraint_name",
        "where fks.constraint_schema = '{dbname}'",
        "  AND fks.referenced_table_name = '{objectname}'",
        "GROUP BY fks.constraint_schema,",
        "  fks.table_name,",
        "  fks.unique_constraint_schema,",
        "  fks.referenced_table_name,",
        "  fks.constraint_name",
        "ORDER BY 1,2;",
        "",
        "SELECT",
        "  fks.table_name AS FKeyTable,",
        "  group_concat(kcu_f.column_name order by kcu_f.position_in_unique_constraint separator ',') AS FKeyColumn,",
        "  fks.referenced_table_name AS PrimaryTable,",
        "  group_concat(kcu_p.column_name order by kcu_p.position_in_unique_constraint separator ',') AS PrimaryTableColumn,",
        "  fks.constraint_name AS FKeyConstraint",
        "FROM information_schema.referential_constraints fks",
        "JOIN information_schema.key_column_usage kcu_f",
        "ON fks.constraint_schema = kcu_f.table_schema",
        "  AND fks.table_name = kcu_f.table_name",
        "  AND fks.constraint_name = kcu_f.constraint_name",
        "JOIN information_schema.key_column_usage kcu_p",
        "ON fks.constraint_schema = kcu_p.table_schema",
        "  AND fks.referenced_table_name = kcu_p.table_name",
        "  AND fks.UNIQUE_CONSTRAINT_NAME = kcu_p.constraint_name",
        "where fks.constraint_schema = '{dbname}'",
        "  AND fks.table_name = '{objectname}'",
        "GROUP BY fks.constraint_schema,",
        "  fks.table_name,",
        "  fks.unique_constraint_schema,",
        "  fks.referenced_table_name,",
        "  fks.constraint_name",
        "ORDER BY 1,2;"
      ]
    },
    "listmetadata": {
      "mssql": [
        "SELECT",
        "  m.uses_quoted_identifier,",
        "  m.uses_ansi_nulls,",
        "  o.type,",
        "  o.name",
        "FROM sys.sql_modules m",
        "INNER JOIN sys.objects o",
        "ON m.object_id = o.object_id",
        "WHERE o.name = '{objectname}'"
      ]
    },
    "referencedby": {
      "mssql": [
        "SELECT",
        "  referencedby = user_name(uid)+'.'+name",
        "FROM sysobjects o",
        "WHERE type IN ('P','V','FN','TF','IF','TR')",
        "  AND EXISTS(SELECT * FROM syscomments WHERE id = o.id AND text LIKE '%[^A-Za-z0-9_]{objectname}[^A-Za-z0-9_]%')",
        "ORDER BY user_name(uid),type,name"
      ]
    },
    "selecttabledata_all": {
      "mssql": [
        "SELECT * FROM {objectname} WITH (NOLOCK)"
      ],
      "oracle": [
        "SELECT * FROM {objectname};"
      ],
      "postgresql": [
        "SELECT * FROM {objectname}"
      ],
      "mysql": [
        "SELECT * FROM {objectname}"
      ],
      "cassandra": [
        "SELECT * FROM {objectname};"
      ],
      "mongodb": [
        "db.getCollection('{objectname}').find().toArray()"
      ]
    },
    "selecttabledata_top": {
      "mssql": [
        "SELECT TOP 100 * FROM {objectname} WITH (NOLOCK)"
      ],
      "oracle": [
        "SELECT * FROM {objectname} WHERE ROWNUM <= 100;"
      ],
      "postgresql": [
        "SELECT * FROM {objectname} LIMIT 100"
      ],
      "mysql": [
        "SELECT * FROM {objectname} LIMIT 100"
      ],
      "cassandra": [
        "SELECT * FROM {objectname} LIMIT 100;"
      ],
      "mongodb": [
        "db.getCollection('{objectname}').find().limit(10).toArray()"
      ]
    },
    "selecttablecount": {
      "mssql": [
        "SELECT COUNT(1) AS [{objectname}] FROM {objectname} WITH (NOLOCK)"
      ],
      "oracle": [
        "SELECT COUNT(1) AS \"{objectname}\" FROM {objectname};"
      ],
      "postgresql": [
        "SELECT COUNT(1) AS \"{objectname}\" FROM {objectname}"
      ],
      "mysql": [
        "SELECT COUNT(1) AS \"{objectname}\" FROM {objectname}"
      ],
      "cassandra": [
        "SELECT COUNT(1) AS \"{objectname}\" FROM {objectname};"
      ],
      "mongodb": [
        "db.getCollection('{objectname}').count()"
      ]
    }
  }
}
